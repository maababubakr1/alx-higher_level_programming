This module defines a base class BaseGeometry.
===================================

it is initialized with no args.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type (bg)
<class '7-base_geometry.BaseGeometry'>


a TypeError is raised if an arg is provided.

>>> bg = BaseGeometry(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: BaseGeometry() takes no arguments

===========================================================

the method area(self) is not implemented yet.

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

::
the method integer_validator(...) validates an integer value of a parameter.

if value is valid integer, the function do nothing.

>>> bg.integer_validator("valid number", 1)
>>>

if it is not an integer, a TypeError is raised.

>>> bg.integer_validator("valid number", "number")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in integer_validator
TypeError: valid number must be an integer


>>> bg.integer_validator("valid number", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in integer_validator
TypeError: valid number must be an integer


>>> bg.integer_validator("valid number", False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in integer_validator
TypeError: valid number must be an integer


>>> bg.integer_validator("valid number", 0.9)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in integer_validator
TypeError: valid number must be an integer


>>> bg.integer_validator("valid number", [8])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in integer_validator
TypeError: valid number must be an integer


>>> bg.integer_validator("valid number", {9})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 6, in integer_validator
TypeError: valid number must be an integer


::::::::::::::::

if value is less than or equal to zero a valueerror is raised

>>> bg.integer_validator("valid number", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 8, in integer_validator
ValueError: valid number must be greater than 0


>>> bg.integer_validator("valid number", -8)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 8, in integer_validator
ValueError: valid number must be greater than 0

::::::::::::::::::::

both name and value should be provided. if one is missing it will raise a TypeError

>>> bg.integer_validator(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'


>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

