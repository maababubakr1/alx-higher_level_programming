This module defines a MyList class that inherits from list.
==========================

an empty list :

>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> print(my_list)
[]

::

single argument:

>>> my_list = MyList([1, 2, 3])
>>> print(my_list)
[1, 2, 3]

::

the argument must be iterable, and be a single list.Otherwise a TypeError is raised.

>>> my_list = MyList([1, 2], [3, 4])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list expected at most 1 argument, got 2


>>> my_list = MyList(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'NoneType' object is not iterable

======================================================

class MyList is inheritsed from list, so it takes its same features.

append:

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> print(my_list)
[1, 2, 3]


========================
MyList has one method: an ascending order sorting "print_sorted(self)"

>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>


if it took argument, a TypeError is raised.

>>> my_list.print_sorted(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: print_sorted() takes 1 positional argument but 2 were given


it sorts in ascending order, leaving the original one unaltered.

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(3)
>>> my_list.append(2)
>>> my_list.append(6)
>>> my_list.append(4)
>>> my_list.append(5)
>>> print(my_list)
[1, 3, 2, 6, 4, 5]
>>> my_list.print_sorted()
[1, 2, 3, 4, 5, 6]
>>> print(my_list)
[1, 3, 2, 6, 4, 5]


