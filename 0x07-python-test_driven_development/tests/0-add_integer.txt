This module defines a function that adds 2 integers ``add_integer(a, b=98)``.
============================

The function returns an integer: the addition of its two arguments, which should be an int or float.

numbers
=======
::

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, -3)
-1

works for positive and negative int
::

>>> add_integer(2.9, 0.2)
2

works for floats. they are casted to ints before addition. floats and non-floats can be combined
::

>>> add_integer(2)
100

second argument is optional "the default is 98"
::

non-numbers
===========
`` if either argument is non-integer and a non-float, a TypeError is raised.

>>> add_integer('a', 8.0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 16, in add_integer
TypeError: a must be an integer

::
>>> add_integer(8.0, 'b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 18, in add_integer
TypeError: b must be an integer

::
`` if both arguments is non-integer and a non-float, a TypeError is printed on the first argument only.
>>> add_integer('a', 'b')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 16, in add_integer
TypeError: a must be an integer

::
`` if infinity is provided the function will fail``
>>> add_integer(2.0, float('inf'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 19, in add_integer
OverflowError: cannot convert float infinity to integer

`` if NaN numbers is provided, ValueError occurs``
>>> add_integer(2.0, float('nan'))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 19, in add_integer
ValueError: cannot convert float NaN to integer
